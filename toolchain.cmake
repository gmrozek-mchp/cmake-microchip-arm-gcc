cmake_minimum_required(VERSION 3.4)

message(STATUS "Configuring Toolchain")

set(TOOLCHAIN arm-none-eabi)

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR ARM)

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

if(TOOLCHAIN_PATH)
    get_filename_component(TOOLCHAIN_ROOT_PATH ${TOOLCHAIN_PATH} REALPATH)
    set(TOOLCHAIN_HOST_BIN_PATH ${TOOLCHAIN_ROOT_PATH}/bin)
    set(TOOLCHAIN_TARGET_ROOT_PATH ${TOOLCHAIN_ROOT_PATH}/${TOOLCHAIN})

    find_program(TOOLCHAIN_HOST_GCC_PATH "${TOOLCHAIN}-gcc" PATHS ${TOOLCHAIN_HOST_BIN_PATH})
    if(TOOLCHAIN_HOST_GCC_PATH MATCHES "NOTFOUND")
        message(FATAL_ERROR "Failed to find required build tool ${TOOLCHAIN}-gcc at ${TOOLCHAIN_PATH}/bin")
    endif()
else()
    find_program(TOOLCHAIN_HOST_GCC_PATH "${TOOLCHAIN}-gcc")
    if(TOOLCHAIN_HOST_GCC_PATH MATCHES "NOTFOUND")
        message(FATAL_ERROR "Failed to find required build tool ${TOOLCHAIN}-gcc")
    endif()

    get_filename_component(TOOLCHAIN_HOST_GCC_PATH ${TOOLCHAIN_HOST_GCC_PATH} REALPATH)
    get_filename_component(TOOLCHAIN_HOST_BIN_PATH ${TOOLCHAIN_HOST_GCC_PATH} DIRECTORY)
    get_filename_component(TOOLCHAIN_ROOT_PATH ${TOOLCHAIN_HOST_BIN_PATH} DIRECTORY)
    set(TOOLCHAIN_TARGET_ROOT_PATH ${TOOLCHAIN_ROOT_PATH}/${TOOLCHAIN})
endif()

message(STATUS "Found toolchain at ${TOOLCHAIN_ROOT_PATH}")

set(CMAKE_C_COMPILER		${TOOLCHAIN_HOST_BIN_PATH}/${TOOLCHAIN}-gcc)
set(CMAKE_CXX_COMPILER		${TOOLCHAIN_HOST_BIN_PATH}/${TOOLCHAIN}-g++)
set(CMAKE_ASM_COMPILER		${TOOLCHAIN_HOST_BIN_PATH}/${TOOLCHAIN}-gcc)
set(CMAKE_OBJCOPY			${TOOLCHAIN_HOST_BIN_PATH}/${TOOLCHAIN}-objcopy)
set(CMAKE_OBJDUMP			${TOOLCHAIN_HOST_BIN_PATH}/${TOOLCHAIN}-objdump)
set(CMAKE_SIZE			    ${TOOLCHAIN_HOST_BIN_PATH}/${TOOLCHAIN}-size)

set(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_TARGET_ROOT_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
